{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Movie Studios.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NXXRTYZCe1C3"
      },
      "source": [
        "# Cluster Analysis"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7DPUDkfSCq6z"
      },
      "source": [
        "# Importing the necessary librairies\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import json"
      ],
      "execution_count": 111,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qEBDTfYYDLXL"
      },
      "source": [
        "# Function for loading in the credits card datasets\n",
        "def load_tmdb_credits(path):\n",
        "    df = pd.read_csv(path)\n",
        "    json_columns = ['cast', 'crew']\n",
        "    for column in json_columns:\n",
        "        df[column] = df[column].apply(json.loads)\n",
        "    return df\n",
        "    \n",
        "# Function for loading in movies datasets\n",
        "def load_tmdb_movies(path):\n",
        "    df = pd.read_csv(path)\n",
        "    df['release_date'] = pd.to_datetime(df['release_date']).apply(lambda x: x.date())\n",
        "    json_columns = ['genres', 'keywords', 'production_countries', 'production_companies', 'spoken_languages']\n",
        "    for column in json_columns:\n",
        "        df[column] = df[column].apply(json.loads)\n",
        "    return df"
      ],
      "execution_count": 112,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "keE8Wic1DOar"
      },
      "source": [
        "# Calling the functions\n",
        "movies = load_tmdb_movies('/content/tmdb_5000_movies.csv')\n",
        "credits = load_tmdb_credits('/content/tmdb_5000_credits.csv')"
      ],
      "execution_count": 113,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8nutbYDFDZxM"
      },
      "source": [
        "# Creating a copy of each data\n",
        "credits_copy = credits.copy()\n",
        "movies_copy = movies.copy()"
      ],
      "execution_count": 114,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 678
        },
        "id": "4kNenU8YMop-",
        "outputId": "c232eaf1-127f-47c3-9c52-53761b539ddd"
      },
      "source": [
        "# First five rows of movies datasets\n",
        "movies_copy.head()"
      ],
      "execution_count": 115,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>budget</th>\n",
              "      <th>genres</th>\n",
              "      <th>homepage</th>\n",
              "      <th>id</th>\n",
              "      <th>keywords</th>\n",
              "      <th>original_language</th>\n",
              "      <th>original_title</th>\n",
              "      <th>overview</th>\n",
              "      <th>popularity</th>\n",
              "      <th>production_companies</th>\n",
              "      <th>production_countries</th>\n",
              "      <th>release_date</th>\n",
              "      <th>revenue</th>\n",
              "      <th>runtime</th>\n",
              "      <th>spoken_languages</th>\n",
              "      <th>status</th>\n",
              "      <th>tagline</th>\n",
              "      <th>title</th>\n",
              "      <th>vote_average</th>\n",
              "      <th>vote_count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>237000000</td>\n",
              "      <td>[{'id': 28, 'name': 'Action'}, {'id': 12, 'nam...</td>\n",
              "      <td>http://www.avatarmovie.com/</td>\n",
              "      <td>19995</td>\n",
              "      <td>[{'id': 1463, 'name': 'culture clash'}, {'id':...</td>\n",
              "      <td>en</td>\n",
              "      <td>Avatar</td>\n",
              "      <td>In the 22nd century, a paraplegic Marine is di...</td>\n",
              "      <td>150.437577</td>\n",
              "      <td>[{'name': 'Ingenious Film Partners', 'id': 289...</td>\n",
              "      <td>[{'iso_3166_1': 'US', 'name': 'United States o...</td>\n",
              "      <td>2009-12-10</td>\n",
              "      <td>2787965087</td>\n",
              "      <td>162.0</td>\n",
              "      <td>[{'iso_639_1': 'en', 'name': 'English'}, {'iso...</td>\n",
              "      <td>Released</td>\n",
              "      <td>Enter the World of Pandora.</td>\n",
              "      <td>Avatar</td>\n",
              "      <td>7.2</td>\n",
              "      <td>11800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>300000000</td>\n",
              "      <td>[{'id': 12, 'name': 'Adventure'}, {'id': 14, '...</td>\n",
              "      <td>http://disney.go.com/disneypictures/pirates/</td>\n",
              "      <td>285</td>\n",
              "      <td>[{'id': 270, 'name': 'ocean'}, {'id': 726, 'na...</td>\n",
              "      <td>en</td>\n",
              "      <td>Pirates of the Caribbean: At World's End</td>\n",
              "      <td>Captain Barbossa, long believed to be dead, ha...</td>\n",
              "      <td>139.082615</td>\n",
              "      <td>[{'name': 'Walt Disney Pictures', 'id': 2}, {'...</td>\n",
              "      <td>[{'iso_3166_1': 'US', 'name': 'United States o...</td>\n",
              "      <td>2007-05-19</td>\n",
              "      <td>961000000</td>\n",
              "      <td>169.0</td>\n",
              "      <td>[{'iso_639_1': 'en', 'name': 'English'}]</td>\n",
              "      <td>Released</td>\n",
              "      <td>At the end of the world, the adventure begins.</td>\n",
              "      <td>Pirates of the Caribbean: At World's End</td>\n",
              "      <td>6.9</td>\n",
              "      <td>4500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>245000000</td>\n",
              "      <td>[{'id': 28, 'name': 'Action'}, {'id': 12, 'nam...</td>\n",
              "      <td>http://www.sonypictures.com/movies/spectre/</td>\n",
              "      <td>206647</td>\n",
              "      <td>[{'id': 470, 'name': 'spy'}, {'id': 818, 'name...</td>\n",
              "      <td>en</td>\n",
              "      <td>Spectre</td>\n",
              "      <td>A cryptic message from Bond’s past sends him o...</td>\n",
              "      <td>107.376788</td>\n",
              "      <td>[{'name': 'Columbia Pictures', 'id': 5}, {'nam...</td>\n",
              "      <td>[{'iso_3166_1': 'GB', 'name': 'United Kingdom'...</td>\n",
              "      <td>2015-10-26</td>\n",
              "      <td>880674609</td>\n",
              "      <td>148.0</td>\n",
              "      <td>[{'iso_639_1': 'fr', 'name': 'Français'}, {'is...</td>\n",
              "      <td>Released</td>\n",
              "      <td>A Plan No One Escapes</td>\n",
              "      <td>Spectre</td>\n",
              "      <td>6.3</td>\n",
              "      <td>4466</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>250000000</td>\n",
              "      <td>[{'id': 28, 'name': 'Action'}, {'id': 80, 'nam...</td>\n",
              "      <td>http://www.thedarkknightrises.com/</td>\n",
              "      <td>49026</td>\n",
              "      <td>[{'id': 849, 'name': 'dc comics'}, {'id': 853,...</td>\n",
              "      <td>en</td>\n",
              "      <td>The Dark Knight Rises</td>\n",
              "      <td>Following the death of District Attorney Harve...</td>\n",
              "      <td>112.312950</td>\n",
              "      <td>[{'name': 'Legendary Pictures', 'id': 923}, {'...</td>\n",
              "      <td>[{'iso_3166_1': 'US', 'name': 'United States o...</td>\n",
              "      <td>2012-07-16</td>\n",
              "      <td>1084939099</td>\n",
              "      <td>165.0</td>\n",
              "      <td>[{'iso_639_1': 'en', 'name': 'English'}]</td>\n",
              "      <td>Released</td>\n",
              "      <td>The Legend Ends</td>\n",
              "      <td>The Dark Knight Rises</td>\n",
              "      <td>7.6</td>\n",
              "      <td>9106</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>260000000</td>\n",
              "      <td>[{'id': 28, 'name': 'Action'}, {'id': 12, 'nam...</td>\n",
              "      <td>http://movies.disney.com/john-carter</td>\n",
              "      <td>49529</td>\n",
              "      <td>[{'id': 818, 'name': 'based on novel'}, {'id':...</td>\n",
              "      <td>en</td>\n",
              "      <td>John Carter</td>\n",
              "      <td>John Carter is a war-weary, former military ca...</td>\n",
              "      <td>43.926995</td>\n",
              "      <td>[{'name': 'Walt Disney Pictures', 'id': 2}]</td>\n",
              "      <td>[{'iso_3166_1': 'US', 'name': 'United States o...</td>\n",
              "      <td>2012-03-07</td>\n",
              "      <td>284139100</td>\n",
              "      <td>132.0</td>\n",
              "      <td>[{'iso_639_1': 'en', 'name': 'English'}]</td>\n",
              "      <td>Released</td>\n",
              "      <td>Lost in our world, found in another.</td>\n",
              "      <td>John Carter</td>\n",
              "      <td>6.1</td>\n",
              "      <td>2124</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "      budget  ... vote_count\n",
              "0  237000000  ...      11800\n",
              "1  300000000  ...       4500\n",
              "2  245000000  ...       4466\n",
              "3  250000000  ...       9106\n",
              "4  260000000  ...       2124\n",
              "\n",
              "[5 rows x 20 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 115
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "Q7O5eB_5My6a",
        "outputId": "be3d53c3-9883-4390-c62b-e25701a1355b"
      },
      "source": [
        "# First five rows of the credits card datasets\n",
        "credits_copy.head()"
      ],
      "execution_count": 116,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>movie_id</th>\n",
              "      <th>title</th>\n",
              "      <th>cast</th>\n",
              "      <th>crew</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>19995</td>\n",
              "      <td>Avatar</td>\n",
              "      <td>[{'cast_id': 242, 'character': 'Jake Sully', '...</td>\n",
              "      <td>[{'credit_id': '52fe48009251416c750aca23', 'de...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>285</td>\n",
              "      <td>Pirates of the Caribbean: At World's End</td>\n",
              "      <td>[{'cast_id': 4, 'character': 'Captain Jack Spa...</td>\n",
              "      <td>[{'credit_id': '52fe4232c3a36847f800b579', 'de...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>206647</td>\n",
              "      <td>Spectre</td>\n",
              "      <td>[{'cast_id': 1, 'character': 'James Bond', 'cr...</td>\n",
              "      <td>[{'credit_id': '54805967c3a36829b5002c41', 'de...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>49026</td>\n",
              "      <td>The Dark Knight Rises</td>\n",
              "      <td>[{'cast_id': 2, 'character': 'Bruce Wayne / Ba...</td>\n",
              "      <td>[{'credit_id': '52fe4781c3a36847f81398c3', 'de...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>49529</td>\n",
              "      <td>John Carter</td>\n",
              "      <td>[{'cast_id': 5, 'character': 'John Carter', 'c...</td>\n",
              "      <td>[{'credit_id': '52fe479ac3a36847f813eaa3', 'de...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   movie_id  ...                                               crew\n",
              "0     19995  ...  [{'credit_id': '52fe48009251416c750aca23', 'de...\n",
              "1       285  ...  [{'credit_id': '52fe4232c3a36847f800b579', 'de...\n",
              "2    206647  ...  [{'credit_id': '54805967c3a36829b5002c41', 'de...\n",
              "3     49026  ...  [{'credit_id': '52fe4781c3a36847f81398c3', 'de...\n",
              "4     49529  ...  [{'credit_id': '52fe479ac3a36847f813eaa3', 'de...\n",
              "\n",
              "[5 rows x 4 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 116
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0NL-bGLFDkKr"
      },
      "source": [
        "# Funtion to append each value of the same key ('name') together\n",
        "def pipe_flatten_names(keywords):\n",
        "    return ', '.join([x['name'] for x in keywords])"
      ],
      "execution_count": 117,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PAxD-lv8DpFh"
      },
      "source": [
        "# Applying the function the respective json columns\n",
        "movies_copy['genres'] = movies_copy['genres'].apply(pipe_flatten_names)\n",
        "movies_copy['keywords'] = movies_copy['keywords'].apply(pipe_flatten_names)\n",
        "movies_copy['production_companies'] = movies_copy['production_companies'].apply(pipe_flatten_names)\n",
        "movies_copy['spoken_languages'] = movies_copy['spoken_languages'].apply(pipe_flatten_names)\n",
        "credits_copy['cast'] = credits_copy['cast'].apply(pipe_flatten_names)"
      ],
      "execution_count": 118,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TBVOByMIDq9Z"
      },
      "source": [
        "# Let's drop some columns that may not really be significant\n",
        "movies_copy = movies_copy.drop(['tagline', 'homepage', 'id', 'original_title', 'production_countries', 'original_language', 'release_date', 'status'], axis = 1)"
      ],
      "execution_count": 119,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iEvYSVzOF3AE"
      },
      "source": [
        "# Appending the cast column from the credits datasets\n",
        "movies_copy = movies_copy.join(credits_copy['cast'])"
      ],
      "execution_count": 120,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HVxiXvfnG-H3"
      },
      "source": [
        "# Obtaining a net income column from the revenue and budget columns\n",
        "movies_copy['net_income'] = movies['revenue'] - movies['budget']"
      ],
      "execution_count": 121,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DrycSys8ZnVY"
      },
      "source": [
        "# Obtaining another column from the net income column\n",
        "terms = [(movies_copy['net_income'] > 0), (movies_copy['net_income'] < 0), (movies_copy['net_income'] == 0)]\n",
        "values = ['profit', 'loss', 'zero']\n",
        "\n",
        "movies_copy['finances'] = np.select(terms, values)"
      ],
      "execution_count": 122,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uaRQSZJobrhA",
        "outputId": "34bdeb9e-b555-4fed-dd4d-a2fe8253efb4"
      },
      "source": [
        "# Checking profit and loss made\n",
        "movies_copy['finances'].value_counts()"
      ],
      "execution_count": 123,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "profit    2585\n",
              "loss      1326\n",
              "zero       892\n",
              "Name: finances, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 123
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vpWx3TNgCBe4",
        "outputId": "e1008372-2d28-4ea4-8e47-d776059b726d"
      },
      "source": [
        "# Let's check the missing values in the desired datasets\n",
        "movies_copy.isnull().sum()"
      ],
      "execution_count": 124,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "budget                  0\n",
              "genres                  0\n",
              "keywords                0\n",
              "overview                3\n",
              "popularity              0\n",
              "production_companies    0\n",
              "revenue                 0\n",
              "runtime                 2\n",
              "spoken_languages        0\n",
              "title                   0\n",
              "vote_average            0\n",
              "vote_count              0\n",
              "cast                    0\n",
              "net_income              0\n",
              "finances                0\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 124
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gcWQOGP2NY7d"
      },
      "source": [
        "# Very few missing values, we can drop them\n",
        "movies_copy.dropna(inplace = True)"
      ],
      "execution_count": 125,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gC5iDxApn5Zf",
        "outputId": "361676da-7d10-47bd-811d-ba7b203780fe"
      },
      "source": [
        "# Shape of the desired datasets\n",
        "movies_copy.shape"
      ],
      "execution_count": 126,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(4800, 15)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 126
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 606
        },
        "id": "XnIvSSpAnZg9",
        "outputId": "e65f6b1c-9b02-468a-8d0a-9ccfbeec99a8"
      },
      "source": [
        "# Preview the first 5 rows\n",
        "movies_copy.head()"
      ],
      "execution_count": 127,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>budget</th>\n",
              "      <th>genres</th>\n",
              "      <th>keywords</th>\n",
              "      <th>overview</th>\n",
              "      <th>popularity</th>\n",
              "      <th>production_companies</th>\n",
              "      <th>revenue</th>\n",
              "      <th>runtime</th>\n",
              "      <th>spoken_languages</th>\n",
              "      <th>title</th>\n",
              "      <th>vote_average</th>\n",
              "      <th>vote_count</th>\n",
              "      <th>cast</th>\n",
              "      <th>net_income</th>\n",
              "      <th>finances</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>237000000</td>\n",
              "      <td>Action, Adventure, Fantasy, Science Fiction</td>\n",
              "      <td>culture clash, future, space war, space colony...</td>\n",
              "      <td>In the 22nd century, a paraplegic Marine is di...</td>\n",
              "      <td>150.437577</td>\n",
              "      <td>Ingenious Film Partners, Twentieth Century Fox...</td>\n",
              "      <td>2787965087</td>\n",
              "      <td>162.0</td>\n",
              "      <td>English, Español</td>\n",
              "      <td>Avatar</td>\n",
              "      <td>7.2</td>\n",
              "      <td>11800</td>\n",
              "      <td>Sam Worthington, Zoe Saldana, Sigourney Weaver...</td>\n",
              "      <td>2550965087</td>\n",
              "      <td>profit</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>300000000</td>\n",
              "      <td>Adventure, Fantasy, Action</td>\n",
              "      <td>ocean, drug abuse, exotic island, east india t...</td>\n",
              "      <td>Captain Barbossa, long believed to be dead, ha...</td>\n",
              "      <td>139.082615</td>\n",
              "      <td>Walt Disney Pictures, Jerry Bruckheimer Films,...</td>\n",
              "      <td>961000000</td>\n",
              "      <td>169.0</td>\n",
              "      <td>English</td>\n",
              "      <td>Pirates of the Caribbean: At World's End</td>\n",
              "      <td>6.9</td>\n",
              "      <td>4500</td>\n",
              "      <td>Johnny Depp, Orlando Bloom, Keira Knightley, S...</td>\n",
              "      <td>661000000</td>\n",
              "      <td>profit</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>245000000</td>\n",
              "      <td>Action, Adventure, Crime</td>\n",
              "      <td>spy, based on novel, secret agent, sequel, mi6...</td>\n",
              "      <td>A cryptic message from Bond’s past sends him o...</td>\n",
              "      <td>107.376788</td>\n",
              "      <td>Columbia Pictures, Danjaq, B24</td>\n",
              "      <td>880674609</td>\n",
              "      <td>148.0</td>\n",
              "      <td>Français, English, Español, Italiano, Deutsch</td>\n",
              "      <td>Spectre</td>\n",
              "      <td>6.3</td>\n",
              "      <td>4466</td>\n",
              "      <td>Daniel Craig, Christoph Waltz, Léa Seydoux, Ra...</td>\n",
              "      <td>635674609</td>\n",
              "      <td>profit</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>250000000</td>\n",
              "      <td>Action, Crime, Drama, Thriller</td>\n",
              "      <td>dc comics, crime fighter, terrorist, secret id...</td>\n",
              "      <td>Following the death of District Attorney Harve...</td>\n",
              "      <td>112.312950</td>\n",
              "      <td>Legendary Pictures, Warner Bros., DC Entertain...</td>\n",
              "      <td>1084939099</td>\n",
              "      <td>165.0</td>\n",
              "      <td>English</td>\n",
              "      <td>The Dark Knight Rises</td>\n",
              "      <td>7.6</td>\n",
              "      <td>9106</td>\n",
              "      <td>Christian Bale, Michael Caine, Gary Oldman, An...</td>\n",
              "      <td>834939099</td>\n",
              "      <td>profit</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>260000000</td>\n",
              "      <td>Action, Adventure, Science Fiction</td>\n",
              "      <td>based on novel, mars, medallion, space travel,...</td>\n",
              "      <td>John Carter is a war-weary, former military ca...</td>\n",
              "      <td>43.926995</td>\n",
              "      <td>Walt Disney Pictures</td>\n",
              "      <td>284139100</td>\n",
              "      <td>132.0</td>\n",
              "      <td>English</td>\n",
              "      <td>John Carter</td>\n",
              "      <td>6.1</td>\n",
              "      <td>2124</td>\n",
              "      <td>Taylor Kitsch, Lynn Collins, Samantha Morton, ...</td>\n",
              "      <td>24139100</td>\n",
              "      <td>profit</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "      budget                                       genres  ...  net_income finances\n",
              "0  237000000  Action, Adventure, Fantasy, Science Fiction  ...  2550965087   profit\n",
              "1  300000000                   Adventure, Fantasy, Action  ...   661000000   profit\n",
              "2  245000000                     Action, Adventure, Crime  ...   635674609   profit\n",
              "3  250000000               Action, Crime, Drama, Thriller  ...   834939099   profit\n",
              "4  260000000           Action, Adventure, Science Fiction  ...    24139100   profit\n",
              "\n",
              "[5 rows x 15 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 127
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QPyXCHu5SA6_"
      },
      "source": [
        "### Film studios are given as production companies in the datasets"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7xhdttU-9VaQ",
        "outputId": "ef6a4e00-fe7b-4dbe-93dc-ec1354e50d91"
      },
      "source": [
        "# Let's have a look at the film studios\n",
        "movies_copy['production_companies'].str.get_dummies(sep=', ').sum().sort_values(ascending = False)"
      ],
      "execution_count": 128,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Warner Bros.                              319\n",
              "Universal Pictures                        311\n",
              "Paramount Pictures                        285\n",
              "Twentieth Century Fox Film Corporation    222\n",
              "Columbia Pictures                         201\n",
              "                                         ... \n",
              "Nancy Tenenbaum Films                       1\n",
              "NVSH Productions                            1\n",
              "NHK                                         1\n",
              "NGN Productions                             1\n",
              "\"DIA\" Productions GmbH & Co. KG             1\n",
              "Length: 5023, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 128
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rT6ClUXha5t3"
      },
      "source": [
        "### Let's take the top five major film studios into consideration"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 614
        },
        "id": "fJTBqSNErKR0",
        "outputId": "a18815be-4184-4ce0-8957-4ac9a54058e2"
      },
      "source": [
        "# First function to obtain the major studios\n",
        "def studios(major_ones):\n",
        "  big_movies = movies_copy[movies_copy['production_companies'].str.contains(major_ones)]\n",
        "  return big_movies\n",
        "\n",
        "# Calling the function\n",
        "warner = studios('Warner Bros.')\n",
        "universal = studios('Universal Pictures')\n",
        "paramount = studios('Paramount Pictures')\n",
        "twenty = studios('Twentieth Century Fox Film Corporation')\n",
        "columbia = studios('Columbia Pictures')\n",
        "\n",
        "# Second function to convert into dataframe\n",
        "def genres(studios):\n",
        "  dataframe = pd.DataFrame(studios['genres'].str.get_dummies(sep = ', ').sum().sort_values(ascending = False))\n",
        "  return dataframe\n",
        "\n",
        "# Calling the function\n",
        "genre1 = genres(warner)\n",
        "genre2 = genres(universal)\n",
        "genre3 = genres(paramount)\n",
        "genre4 = genres(twenty)\n",
        "genre5 = genres(columbia)\n",
        "\n",
        "# Genres that they all have in common\n",
        "genre = pd.concat([genre1, genre2, genre3, genre4, genre5], axis=1, join = 'inner')\n",
        "names = ['Warner Bros.', 'Universal Pictures', 'Paramount Picture', 'Twentieth Century Fox Film Corporation', 'Columbia Pictures']\n",
        "genre.columns = names\n",
        "genre"
      ],
      "execution_count": 129,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Warner Bros.</th>\n",
              "      <th>Universal Pictures</th>\n",
              "      <th>Paramount Picture</th>\n",
              "      <th>Twentieth Century Fox Film Corporation</th>\n",
              "      <th>Columbia Pictures</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Drama</th>\n",
              "      <td>155</td>\n",
              "      <td>121</td>\n",
              "      <td>110</td>\n",
              "      <td>83</td>\n",
              "      <td>136</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Action</th>\n",
              "      <td>116</td>\n",
              "      <td>87</td>\n",
              "      <td>94</td>\n",
              "      <td>92</td>\n",
              "      <td>89</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Thriller</th>\n",
              "      <td>106</td>\n",
              "      <td>83</td>\n",
              "      <td>102</td>\n",
              "      <td>67</td>\n",
              "      <td>74</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Comedy</th>\n",
              "      <td>99</td>\n",
              "      <td>142</td>\n",
              "      <td>100</td>\n",
              "      <td>85</td>\n",
              "      <td>132</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Adventure</th>\n",
              "      <td>86</td>\n",
              "      <td>61</td>\n",
              "      <td>82</td>\n",
              "      <td>62</td>\n",
              "      <td>58</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Crime</th>\n",
              "      <td>71</td>\n",
              "      <td>46</td>\n",
              "      <td>44</td>\n",
              "      <td>29</td>\n",
              "      <td>49</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fantasy</th>\n",
              "      <td>60</td>\n",
              "      <td>38</td>\n",
              "      <td>18</td>\n",
              "      <td>30</td>\n",
              "      <td>37</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Romance</th>\n",
              "      <td>47</td>\n",
              "      <td>66</td>\n",
              "      <td>44</td>\n",
              "      <td>32</td>\n",
              "      <td>60</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Science Fiction</th>\n",
              "      <td>45</td>\n",
              "      <td>40</td>\n",
              "      <td>49</td>\n",
              "      <td>56</td>\n",
              "      <td>26</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Mystery</th>\n",
              "      <td>41</td>\n",
              "      <td>20</td>\n",
              "      <td>34</td>\n",
              "      <td>13</td>\n",
              "      <td>23</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Family</th>\n",
              "      <td>36</td>\n",
              "      <td>32</td>\n",
              "      <td>22</td>\n",
              "      <td>35</td>\n",
              "      <td>34</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Horror</th>\n",
              "      <td>22</td>\n",
              "      <td>36</td>\n",
              "      <td>24</td>\n",
              "      <td>13</td>\n",
              "      <td>17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Animation</th>\n",
              "      <td>17</td>\n",
              "      <td>8</td>\n",
              "      <td>12</td>\n",
              "      <td>11</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>History</th>\n",
              "      <td>14</td>\n",
              "      <td>14</td>\n",
              "      <td>8</td>\n",
              "      <td>12</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>War</th>\n",
              "      <td>14</td>\n",
              "      <td>10</td>\n",
              "      <td>8</td>\n",
              "      <td>6</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Music</th>\n",
              "      <td>13</td>\n",
              "      <td>10</td>\n",
              "      <td>12</td>\n",
              "      <td>9</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Western</th>\n",
              "      <td>8</td>\n",
              "      <td>2</td>\n",
              "      <td>6</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Documentary</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                 Warner Bros.  ...  Columbia Pictures\n",
              "Drama                     155  ...                136\n",
              "Action                    116  ...                 89\n",
              "Thriller                  106  ...                 74\n",
              "Comedy                     99  ...                132\n",
              "Adventure                  86  ...                 58\n",
              "Crime                      71  ...                 49\n",
              "Fantasy                    60  ...                 37\n",
              "Romance                    47  ...                 60\n",
              "Science Fiction            45  ...                 26\n",
              "Mystery                    41  ...                 23\n",
              "Family                     36  ...                 34\n",
              "Horror                     22  ...                 17\n",
              "Animation                  17  ...                 16\n",
              "History                    14  ...                 15\n",
              "War                        14  ...                 10\n",
              "Music                      13  ...                 11\n",
              "Western                     8  ...                  4\n",
              "Documentary                 2  ...                  2\n",
              "\n",
              "[18 rows x 5 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 129
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "-BTs39REABiK",
        "outputId": "573cb090-12b7-404b-e8ce-7659aa6f3944"
      },
      "source": [
        "# Let's have a look at their finances. Majorly profits.\n",
        "# Function to obtain the finances\n",
        "def finances(big_studio):\n",
        "  studio = big_studio['finances'].str.get_dummies(sep=', ').sum().sort_values(ascending = False)\n",
        "  return studio\n",
        "\n",
        "# Calling the function\n",
        "w_f = finances(warner)\n",
        "u_f = finances(universal)\n",
        "p_f = finances(paramount)\n",
        "t_f = finances(twenty)\n",
        "c_f = finances(columbia)\n",
        "\n",
        "finance = pd.concat([w_f, u_f, p_f, t_f, c_f], axis=1, join = 'inner')\n",
        "finance.columns = names\n",
        "finance"
      ],
      "execution_count": 130,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Warner Bros.</th>\n",
              "      <th>Universal Pictures</th>\n",
              "      <th>Paramount Picture</th>\n",
              "      <th>Twentieth Century Fox Film Corporation</th>\n",
              "      <th>Columbia Pictures</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>profit</th>\n",
              "      <td>230</td>\n",
              "      <td>235</td>\n",
              "      <td>208</td>\n",
              "      <td>179</td>\n",
              "      <td>208</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>loss</th>\n",
              "      <td>86</td>\n",
              "      <td>62</td>\n",
              "      <td>63</td>\n",
              "      <td>34</td>\n",
              "      <td>70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>zero</th>\n",
              "      <td>18</td>\n",
              "      <td>17</td>\n",
              "      <td>14</td>\n",
              "      <td>9</td>\n",
              "      <td>21</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "        Warner Bros.  ...  Columbia Pictures\n",
              "profit           230  ...                208\n",
              "loss              86  ...                 70\n",
              "zero              18  ...                 21\n",
              "\n",
              "[3 rows x 5 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 130
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "RtSVXnQzBYkI",
        "outputId": "8caa78b7-d240-4066-d2bc-07916c475928"
      },
      "source": [
        "# Let's also have a look at the major casts in their movie roles\n",
        "# Function to obtain the casts\n",
        "def cast(big_studio):\n",
        "  studio = big_studio['cast'].str.get_dummies(sep=', ').sum().sort_values(ascending = False)\n",
        "  return studio\n",
        "\n",
        "# Calling the function\n",
        "w_c = cast(warner)\n",
        "u_c = cast(universal)\n",
        "p_c = cast(paramount)\n",
        "t_c = cast(twenty)\n",
        "c_c = cast(columbia)\n",
        "\n",
        "# Top casts that they all have in common\n",
        "casts = pd.concat([w_c, u_c, p_c, t_c, c_c], axis=1, join = 'inner')\n",
        "casts.columns = names\n",
        "casts.head(5)"
      ],
      "execution_count": 131,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Warner Bros.</th>\n",
              "      <th>Universal Pictures</th>\n",
              "      <th>Paramount Picture</th>\n",
              "      <th>Twentieth Century Fox Film Corporation</th>\n",
              "      <th>Columbia Pictures</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>George Clooney</th>\n",
              "      <td>11</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Matt Damon</th>\n",
              "      <td>11</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Laurence Fishburne</th>\n",
              "      <td>10</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Keanu Reeves</th>\n",
              "      <td>9</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Morgan Freeman</th>\n",
              "      <td>9</td>\n",
              "      <td>6</td>\n",
              "      <td>7</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                    Warner Bros.  ...  Columbia Pictures\n",
              "George Clooney                11  ...                  1\n",
              "Matt Damon                    11  ...                  3\n",
              "Laurence Fishburne            10  ...                  3\n",
              "Keanu Reeves                   9  ...                  2\n",
              "Morgan Freeman                 9  ...                  1\n",
              "\n",
              "[5 rows x 5 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 131
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 520
        },
        "id": "IftRpoKcCm3U",
        "outputId": "5d03d083-e4aa-4276-9eb3-3e66326d3de5"
      },
      "source": [
        "# Lists of languages spoken in their movies\n",
        "# Function to obtain the languages\n",
        "def languages(big_studio):\n",
        "  studio = big_studio['spoken_languages'].str.get_dummies(sep=', ').sum().sort_values(ascending = False)\n",
        "  return studio\n",
        "\n",
        "# Calling the function\n",
        "w_l = languages(warner)\n",
        "u_l = languages(universal)\n",
        "p_l = languages(paramount)\n",
        "t_l = languages(twenty)\n",
        "c_l = languages(columbia)\n",
        "\n",
        "# Top languages that they all have in common\n",
        "language = pd.concat([w_l, u_l, p_l, t_l, c_l], axis=1, join = 'inner')\n",
        "language.columns = names\n",
        "language"
      ],
      "execution_count": 132,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Warner Bros.</th>\n",
              "      <th>Universal Pictures</th>\n",
              "      <th>Paramount Picture</th>\n",
              "      <th>Twentieth Century Fox Film Corporation</th>\n",
              "      <th>Columbia Pictures</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>English</th>\n",
              "      <td>327</td>\n",
              "      <td>311</td>\n",
              "      <td>284</td>\n",
              "      <td>220</td>\n",
              "      <td>294</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Français</th>\n",
              "      <td>31</td>\n",
              "      <td>24</td>\n",
              "      <td>20</td>\n",
              "      <td>25</td>\n",
              "      <td>26</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Español</th>\n",
              "      <td>20</td>\n",
              "      <td>29</td>\n",
              "      <td>18</td>\n",
              "      <td>21</td>\n",
              "      <td>35</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Deutsch</th>\n",
              "      <td>17</td>\n",
              "      <td>25</td>\n",
              "      <td>21</td>\n",
              "      <td>19</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Italiano</th>\n",
              "      <td>16</td>\n",
              "      <td>12</td>\n",
              "      <td>13</td>\n",
              "      <td>14</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Pусский</th>\n",
              "      <td>11</td>\n",
              "      <td>13</td>\n",
              "      <td>12</td>\n",
              "      <td>10</td>\n",
              "      <td>19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>普通话</th>\n",
              "      <td>9</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>日本語</th>\n",
              "      <td>6</td>\n",
              "      <td>8</td>\n",
              "      <td>1</td>\n",
              "      <td>7</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>العربية</th>\n",
              "      <td>5</td>\n",
              "      <td>9</td>\n",
              "      <td>6</td>\n",
              "      <td>8</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>广州话 / 廣州話</th>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Český</th>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>8</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Latin</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Português</th>\n",
              "      <td>1</td>\n",
              "      <td>10</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Magyar</th>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ελληνικά</th>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "           Warner Bros.  ...  Columbia Pictures\n",
              "English             327  ...                294\n",
              "Français             31  ...                 26\n",
              "Español              20  ...                 35\n",
              "Deutsch              17  ...                 11\n",
              "Italiano             16  ...                 11\n",
              "Pусский              11  ...                 19\n",
              "普通话                   9  ...                  6\n",
              "日本語                   6  ...                  8\n",
              "العربية               5  ...                  1\n",
              "广州话 / 廣州話             4  ...                  6\n",
              "Český                 3  ...                  4\n",
              "Latin                 3  ...                  8\n",
              "Português             1  ...                  9\n",
              "Magyar                1  ...                  1\n",
              "ελληνικά              1  ...                  1\n",
              "\n",
              "[15 rows x 5 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 132
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ha9MDCl5bre6"
      },
      "source": [
        "### Let's also take another five independents into consideration\n",
        "According to BBC's GCSE Media Study Revision, independent movies are produced by smaller production companies. They do not follow the same formula as studio films."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "OgeSBYdXAgDK",
        "outputId": "3b729719-716c-4438-fbde-d70428312d7e"
      },
      "source": [
        "# Five independents\n",
        "dna = studios('DNA Films')\n",
        "bold = studios('Bold Films')\n",
        "cine = studios('CinéCinéma')\n",
        "art = studios('Artisan Entertainment')\n",
        "robot = studios('Bad Robot')\n",
        "\n",
        "genre1 = genres(dna)\n",
        "genre2 = genres(bold)\n",
        "genre3 = genres(cine)\n",
        "genre4 = genres(art)\n",
        "genre5 = genres(robot)\n",
        "\n",
        "# Genres that they all have in common\n",
        "genre = pd.concat([genre1, genre2, genre3, genre4, genre5], axis=1, join = 'inner')\n",
        "names = ['DNA Films', 'Bold Films', 'CinéCinéma', 'Artisan Entertainment', 'Bad Robot']\n",
        "genre.columns = names\n",
        "genre"
      ],
      "execution_count": 133,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>DNA Films</th>\n",
              "      <th>Bold Films</th>\n",
              "      <th>CinéCinéma</th>\n",
              "      <th>Artisan Entertainment</th>\n",
              "      <th>Bad Robot</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Drama</th>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>8</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Thriller</th>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Action</th>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "          DNA Films  Bold Films  CinéCinéma  Artisan Entertainment  Bad Robot\n",
              "Drama             6           6           8                      3          3\n",
              "Thriller          3           6           3                      5          6\n",
              "Action            1           2           3                      2          6"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 133
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "aeHNjNSqAu5u",
        "outputId": "b6a0d265-3157-42a2-c432-4650b3f15e9d"
      },
      "source": [
        "# Let's also have a look at their finances.\n",
        "d_f = finances(dna)\n",
        "b_f = finances(bold)\n",
        "c_f = finances(cine)\n",
        "a_f = finances(art)\n",
        "r_f = finances(robot)\n",
        "\n",
        "finance = pd.concat([d_f, b_f, c_f, a_f, r_f], axis=1, sort = 'False')\n",
        "finance.columns = names\n",
        "finance"
      ],
      "execution_count": 134,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>DNA Films</th>\n",
              "      <th>Bold Films</th>\n",
              "      <th>CinéCinéma</th>\n",
              "      <th>Artisan Entertainment</th>\n",
              "      <th>Bad Robot</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>loss</th>\n",
              "      <td>3.0</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>profit</th>\n",
              "      <td>7.0</td>\n",
              "      <td>6</td>\n",
              "      <td>7</td>\n",
              "      <td>6</td>\n",
              "      <td>10.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>zero</th>\n",
              "      <td>NaN</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "        DNA Films  Bold Films  CinéCinéma  Artisan Entertainment  Bad Robot\n",
              "loss          3.0           2           2                      2        NaN\n",
              "profit        7.0           6           7                      6       10.0\n",
              "zero          NaN           2           1                      2        NaN"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 134
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 49
        },
        "id": "YI7eUu7uBf9S",
        "outputId": "2069612d-55d3-4cee-c0bc-512e9cdf62c5"
      },
      "source": [
        "# Let's have a look at their major casts in movie roles\n",
        "d_c = cast(dna)\n",
        "b_c = cast(bold)\n",
        "c_c = cast(cine)\n",
        "a_c = cast(art)\n",
        "r_c = cast(robot)\n",
        "\n",
        "# Top casts that they all have in common\n",
        "casts = pd.concat([d_c, b_c, c_c, a_c, r_c], axis=1, join = 'inner')\n",
        "casts.columns = names\n",
        "casts"
      ],
      "execution_count": 135,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>DNA Films</th>\n",
              "      <th>Bold Films</th>\n",
              "      <th>CinéCinéma</th>\n",
              "      <th>Artisan Entertainment</th>\n",
              "      <th>Bad Robot</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [DNA Films, Bold Films, CinéCinéma, Artisan Entertainment, Bad Robot]\n",
              "Index: []"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 135
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4MglZMBEgqmd"
      },
      "source": [
        "Not a single cast in common amongst the five randomly chosen independents"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "Ebf1aqTXCaa7",
        "outputId": "d0d0f6cd-9501-425e-e7b0-18aa2a5e816b"
      },
      "source": [
        "# Lists of languages spoken in their movies\n",
        "d_l = languages(dna)\n",
        "b_l = languages(bold)\n",
        "c_l = languages(cine)\n",
        "a_l = languages(art)\n",
        "r_l = languages(robot)\n",
        "\n",
        "# Languages that they all have in common\n",
        "language = pd.concat([d_l, b_l, c_l, a_l, r_l], axis=1, join = 'inner')\n",
        "language.columns = names\n",
        "language"
      ],
      "execution_count": 136,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>DNA Films</th>\n",
              "      <th>Bold Films</th>\n",
              "      <th>CinéCinéma</th>\n",
              "      <th>Artisan Entertainment</th>\n",
              "      <th>Bad Robot</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>English</th>\n",
              "      <td>10</td>\n",
              "      <td>10</td>\n",
              "      <td>8</td>\n",
              "      <td>10</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Français</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "          DNA Films  Bold Films  CinéCinéma  Artisan Entertainment  Bad Robot\n",
              "English          10          10           8                     10         10\n",
              "Français          3           1           4                      2          1"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 136
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "W2tCexgqLJWd"
      },
      "source": [
        "## Let's try to answer the questions - How sharp is the divide between major film studios and the independents? Do those two groups fall naturally out of a clustering analysis or is something more complicated going on?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qA8qs9vFdBmR"
      },
      "source": [
        "* After careful analysis, there is a sharp divide between the major film studios and independents. The most prominent and expensive actors and actresses around the world do not feature in the independents' movies, less languages are spoken in the independents' movies, less movie genres in the independents' movies, less revenue/less profit, higher loss-to-profit ratio than the major film studios.\n",
        "* Both groups remain in very different clusters, and that's why movies from the major film studios are more watched worldwide, talked about worldwide, given awards, have more casts and budgets, and also ruling the Hollywood sector."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Lkp5KdEylxOZ"
      },
      "source": [
        "## Let's try to build a simple movie recommender based on the production companies"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "z_leSbzonhjO"
      },
      "source": [
        "# Importing the necessary dependencies\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.metrics.pairwise import linear_kernel\n",
        "\n",
        "# Instantiating the vectorizer\n",
        "vector = TfidfVectorizer(stop_words='english')\n",
        "\n",
        "# Transforming each production company\n",
        "vector_matrix = vector.fit_transform(movies_copy['production_companies'])\n",
        "\n",
        "# Checking the shape\n",
        "vector_matrix.shape\n",
        "\n",
        "# Instantiating the linear kernel\n",
        "new = linear_kernel(vector_matrix, vector_matrix)\n",
        "\n",
        "# Dropping duplicate title of movies\n",
        "indices = pd.Series(movies_copy.index, index=movies_copy['title']).drop_duplicates()"
      ],
      "execution_count": 137,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "APSIAfqJpIUq"
      },
      "source": [
        "# Function to build the recommender\n",
        "def obtain_recommendations(title, cosine_sim=new):\n",
        "    idx = indices[title]\n",
        "    sim_scores = list(enumerate(new[idx]))\n",
        "    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n",
        "    sim_scores = sim_scores[1:11]\n",
        "    movie_indices = [i[0] for i in sim_scores]\n",
        "    return movies_copy['title'].iloc[movie_indices]"
      ],
      "execution_count": 138,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bUa9Qr-XokBZ"
      },
      "source": [
        "### Let's get recommendations from Avatar (produced by a major film studio)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4Ph14gmzpdQ9",
        "outputId": "539956e5-a99a-4425-aec1-130db9d956e3"
      },
      "source": [
        "obtain_recommendations('Avatar')"
      ],
      "execution_count": 139,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "282                           True Lies\n",
              "25                              Titanic\n",
              "335      Rise of the Planet of the Apes\n",
              "843                           The Watch\n",
              "261               Live Free or Die Hard\n",
              "766     Garfield: A Tail of Two Kitties\n",
              "3029           Kung Pow: Enter the Fist\n",
              "192                           Australia\n",
              "292                              Eragon\n",
              "1124                           The Heat\n",
              "Name: title, dtype: object"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 139
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bdGwKa2LoTN6"
      },
      "source": [
        "We obtain other top movies from major film studios"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pOmM0MrtqyZv"
      },
      "source": [
        "### Let's also get recommendations from Coco Before Chanel (produced by an independent)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8Oci6b_zqSoL",
        "outputId": "0ebcffdf-3b3c-4ae5-8607-bfc0bc80b24e"
      },
      "source": [
        "obtain_recommendations('Coco Before Chanel')"
      ],
      "execution_count": 140,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3876                                     The Class\n",
              "1140                                       Micmacs\n",
              "474                                      Evolution\n",
              "235                   Asterix at the Olympic Games\n",
              "4609                           When the Cat's Away\n",
              "1999    The Adventurer: The Curse of the Midas Box\n",
              "1673                               Little Nicholas\n",
              "1873                                    Blood Ties\n",
              "3792                                         Adore\n",
              "2662                                   Sarah's Key\n",
              "Name: title, dtype: object"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 140
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3CI7ZHMTrCGb"
      },
      "source": [
        "Also, we obtain other movies from independents"
      ]
    }
  ]
}
